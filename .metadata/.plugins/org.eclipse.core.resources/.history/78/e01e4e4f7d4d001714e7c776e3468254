#include "GSRemoteTalkMgr.h"
#include "common.h"
//#include "APlayer.h" //jyc20170606 remove
#include "RunCode.h"
#include "IPCameraBase.h"
#include <pthread.h>

#include "Aacdecoder.h" //jyc20170601 add

#define defValidTime_newPlay_param 15000


void struNewPlay_Param::settick()
{
	this->ts = timeGetTime();
}

//
//void g_setAPlayerParam( APlayer &ap )
//{
//	if( IsRUNCODEEnable(defCodeIndex_APlay_ProbeSize) )
//	{
//		const int c_probesize = RUNCODE_Get(defCodeIndex_APlay_ProbeSize,defRunCodeValIndex_2);
//		if( c_probesize >= 0 )
//		{
//			ap.m_probesize = c_probesize;
//		}
//	}
//}
//
//bool g_AddPlayOut( APlayer &ap, const GSIOTDeviceKey &devkey, ITalkNotify *pITalkNotify )
//{
//	// ָ�������豸
//	GSIOTDevice *pDev = NULL;
//	defGSReturn ret = defGSReturn_Null;
//	if( IOT_DEVICE_Unknown != devkey.m_type && devkey.m_id>0 )
//	{
//		if( pITalkNotify )
//		{
//			const defvecDevKey c_vecdev;
//			pDev = (GSIOTDevice*)pITalkNotify->OnTalkNotify( XmppGSTalk::defTalkSelfCmd_GetDevice, "", "", "", true, c_vecdev, true, devkey.m_type, devkey.m_id );
//			ret = ap.AddPlayOut( pDev );
//		}
//	}
//	else
//	{
//		ret = ap.AddPlayOut( NULL );
//	}
//
//	if( defGSReturn_Success == ret || defGSReturn_IsExist == ret ) // �Ѵ�Ҳ��Ϊ�ɹ�
//	{
//		return true;
//	}
//
//	return false;
//}
//
//bool g_OnProc_TalkParam( const int Play_id, APlayer &ap, defvecTalkParam &vecTalkParam, ITalkNotify *pITalkNotify )
//{
//	for( defvecTalkParam::const_iterator it=vecTalkParam.begin(); it!=vecTalkParam.end(); ++it )
//	{
//		if( timeGetTime()-it->ts > 20000 )
//		{
//			LOGMSG( "TalkMgr::OnProc(%d) Talk running cmd=%d overtime! from_Jid=\"%s\", from_id=\"%s\"", Play_id, it->cmd, it->from_Jid.c_str(), it->from_id.c_str() );
//			continue;
//		}
//
//		const struNewPlay_Param &param = *it;
//		//jyc20170330 remove
//		//LOGMSG( "TalkMgr::g_OnProc_TalkParam(%d) cmd=\"%s\", from_Jid=\"%s\", from_id=\"%s\"", Play_id, XmppGSTalk::TalkCmd2String(it->cmd).c_str(), it->from_Jid.c_str(), it->from_id.c_str() );
//
//		switch( it->cmd )
//		{
//		case XmppGSTalk::defTalkCmd_adddev:
//			{
//				defvecDevKey successDevlst;
//				defvecDevKey failedDevlst;
//				if( !param.vecdev.empty() )
//				{
//					for( size_t i=0; i<param.vecdev.size(); ++i )
//					{
//						if( g_AddPlayOut( ap, param.vecdev[i], pITalkNotify ) )
//						{
//							successDevlst.push_back( param.vecdev[i] );
//						}
//						else
//						{
//							failedDevlst.push_back( param.vecdev[i] );
//						}
//					}
//				}
//
//				// ��û��ʱҲ����ʧ��
//				if( successDevlst.empty() && failedDevlst.empty() )
//				{
//					if( pITalkNotify )
//					{
//						pITalkNotify->OnTalkNotify( XmppGSTalk::defTalkCmd_adddev, param.url, param.from_Jid, param.from_id, true, successDevlst, false );
//					}
//				}
//
//				if( !successDevlst.empty() )
//				{
//					if( pITalkNotify )
//					{
//						pITalkNotify->OnTalkNotify( XmppGSTalk::defTalkCmd_adddev, param.url, param.from_Jid, param.from_id, true, successDevlst, true );
//					}
//
//					successDevlst.clear();
//				}
//
//			}
//			break;
//
//		case XmppGSTalk::defTalkCmd_removedev:
//			{
//				defvecDevKey successDevlst;
//				defvecDevKey failedDevlst;
//				if( !param.vecdev.empty() )
//				{
//					for( size_t i=0; i<param.vecdev.size(); ++i )
//					{
//						if( ap.RemovePlayOut( param.vecdev[i] ) )
//						{
//							successDevlst.push_back( param.vecdev[i] );
//						}
//						else
//						{
//							failedDevlst.push_back( param.vecdev[i] );
//						}
//					}
//				}
//
//				// ��û��ʱҲ����ʧ��
//				if( successDevlst.empty() && failedDevlst.empty() )
//				{
//					if( pITalkNotify )
//					{
//						pITalkNotify->OnTalkNotify( XmppGSTalk::defTalkCmd_removedev, param.url, param.from_Jid, param.from_id, true, successDevlst, false );
//					}
//				}
//				else if( !successDevlst.empty() )
//				{
//					if( pITalkNotify )
//					{
//						pITalkNotify->OnTalkNotify( XmppGSTalk::defTalkCmd_removedev, param.url, param.from_Jid, param.from_id, true, successDevlst, true );
//					}
//
//					successDevlst.clear();
//				}
//				else if( !failedDevlst.empty() )
//				{
//					if( pITalkNotify )
//					{
//						pITalkNotify->OnTalkNotify( XmppGSTalk::defTalkCmd_removedev, param.url, param.from_Jid, param.from_id, true, failedDevlst, false );
//					}
//
//					failedDevlst.clear();
//				}
//			}
//			break;
//
//		case XmppGSTalk::defTalkCmd_keepalive:
//			{
//				defvecDevKey successDevlst;
//				defvecDevKey failedDevlst;
//				if( !param.vecdev.empty() )
//				{
//					if( !ap.Keepalive( param.vecdev, successDevlst, failedDevlst ) )
//					{
//						if( pITalkNotify )
//						{
//							pITalkNotify->OnTalkNotify( XmppGSTalk::defTalkCmd_quit, param.url, param.from_Jid, param.from_id, true, failedDevlst, true );
//						}
//
//						break;
//					}
//					else if( !successDevlst.empty() )
//					{
//						if( pITalkNotify )
//						{
//							pITalkNotify->OnTalkNotify( XmppGSTalk::defTalkCmd_keepalive, param.url, param.from_Jid, param.from_id, true, successDevlst, true );
//						}
//
//						successDevlst.clear();
//					}
//					else if( !failedDevlst.empty() )
//					{
//						if( pITalkNotify )
//						{
//							pITalkNotify->OnTalkNotify( XmppGSTalk::defTalkCmd_removedev, param.url, param.from_Jid, param.from_id, true, failedDevlst, true );
//						}
//
//						failedDevlst.clear();
//					}
//				}
//				else
//				{
//					if( pITalkNotify )
//					{
//						pITalkNotify->OnTalkNotify( XmppGSTalk::defTalkCmd_keepalive, param.url, param.from_Jid, param.from_id, true, param.vecdev, true );
//					}
//				}
//			}
//			break;
//		}
//	}
//
//	return true;
//}

void struTalkState::set_play( bool in_play )
{
	this->play = in_play;
	this->ts = timeGetTime();
	if( 0 == this->ts )
		this->ts += 1;

	if( this->play )
	{
		IsPlaying_ts = timeGetTime();
		keepalive_ts = timeGetTime();
	}
}

void struTalkState::set_IsPlaying_ts()
{
	if( this->play )
		IsPlaying_ts = timeGetTime();
}

GSRemoteTalkMgr::GSRemoteTalkMgr(void)
	: m_last_checktime(0), m_last_key(0), m_ts_newPlay_param(0)
{
}

GSRemoteTalkMgr::~GSRemoteTalkMgr(void)
{
	LOGMSG( "~GSRemoteTalkMgr()" );

	StopTalk_All();

	bool isOnlyOneTalk_cur = false;
	DWORD dwStart = ::timeGetTime();
	while( isPlaying(isOnlyOneTalk_cur) && ::timeGetTime()-dwStart < 2000 )
	{
		usleep(50000); //Sleep(50);
	}
}

std::string GSRemoteTalkMgr::GetStateInfoForMap( const defmapTalk &mapTalk )
{
	if( mapTalk.empty() )
		return std::string("��ǰͨ��״̬: 0ͨ��");

	unsigned long QueueCount = 0;
	unsigned long PlayCount = 0;
	bool isOnlyOneTalk = false;
	GetCountInfoForMap( mapTalk, QueueCount, PlayCount, isOnlyOneTalk );

	char buf[1024] = {0};
	snprintf( buf, sizeof(buf), "��ǰͨ��״̬: %luͨ����, ��������%lu, ��ռͨ��=%d", PlayCount, QueueCount, isOnlyOneTalk );

	std::string strState = buf;

	defmapTalk::const_iterator it = mapTalk.begin();
	for( int i=1; it != mapTalk.end(); ++it, ++i )
	{
		unsigned long second = (timeGetTime()-it->second.ts)/1000;
		if( second > 60 )
		{
			snprintf( buf, sizeof(buf), "%lu��%lu��", second/60, second%60 );
		}
		else
		{
			snprintf( buf, sizeof(buf), "%lu��", second );
		}
		std::string strTime = buf;

		snprintf( buf, sizeof(buf), "\r\n(%d) %s, ʱ��=%s, ��ռ=%d, from=%s, url=\"%s\"", 
			i,
			it->second.play ? "ͨ����":"ֹͣ",
			strTime.c_str(),
			it->second.isOnlyOneTalk,
			it->second.from_Jid.c_str(),
			it->first.c_str() );

		strState += buf;
	}

	return strState;
}

void GSRemoteTalkMgr::GetCountInfoForMap( const defmapTalk &mapTalk, unsigned long &QueueCount, unsigned long &PlayCount, bool &isOnlyOneTalk )
{
	QueueCount = mapTalk.size();
	PlayCount = 0;
	isOnlyOneTalk = false;

	defmapTalk::const_iterator it = mapTalk.begin();
	for( ; it != mapTalk.end(); ++it )
	{
		if( it->second.play )
		{
			PlayCount++;

			if( it->second.isOnlyOneTalk )
			{
				isOnlyOneTalk = true;
			}
		}
	}
}

//unsigned __stdcall APlayThread(LPVOID lpPara)
void *APlayThread(LPVOID lpPara)
{
	GSRemoteTalkMgr *p = (GSRemoteTalkMgr*)lpPara;

	static int s_lastAPlayThread_id_ = 0;
	const int Play_id = ++s_lastAPlayThread_id_;

	LOGMSG( "TalkMgr::APlayThread(%d) begin...", Play_id );

	if( p )
	{
		p->OnProc( Play_id );
	}

	LOGMSG( "TalkMgr::APlayThread(%d) end.", Play_id );
	//return 0; //jyc20170526 remove
}


#include "librtmp/rtmp_sys.h" //jyc20170531 add
#include "player.h"

void GSRemoteTalkMgr::OnProc( const int Play_id )
{
	struNewPlay_Param param;
	if( !NewPlay_ParamPop( param ) )
	{
		//LOGMSGEX( defLOGNAME, defLOG_ERROR, "TalkMgr::OnProc(%d) NewPlay_ParamPop failed!", Play_id );
		return;
	}

	if( param.url.empty() )
	{
		LOGMSG( "TalkMgr::OnProc(%d) url is null!", Play_id );
		return;
	}

	// ��¼���ڲ��ŵ�url
	//const unsigned long key = UrlKey_Add( param );

	defvecTalkParam vecTalkParam;
	defvecDevKey successDevlst;
	defvecDevKey failedDevlst;
	const std::string play_url = param.url + " live=1";
//	APlayer ap;
//	g_setAPlayerParam( ap ); //jyc20170606 remove
	LOGMSG( "TalkMgr::OnProc(%d) APlayer.Open(%s), from_Jid=\"%s\", from_id=\"%s\"", Play_id, play_url.c_str(), param.from_Jid.c_str(), param.from_id.c_str() );

	bool doOpenLocal = false;
	bool hasSuccess = false;

	RTMP *rtmp = RTMP_Alloc();  //jyc20170532 add
	RTMP_Init(rtmp);
	if (!RTMP_SetupURL(rtmp, (char*) play_url.c_str())) {
		RTMP_Free(rtmp);
	}
    if(!RTMP_Connect(rtmp,NULL)){
        RTMP_Free(rtmp);
    }
    if(!RTMP_ConnectStream(rtmp,0)){
        RTMP_Close(rtmp);
        RTMP_Free(rtmp);
    }
    int nRead,buflen=0;
    int bufsize=1024*10;
    char *buf=(char*)malloc(bufsize);
    char *aacplaybuf= (char*)malloc(1024*1024*2);
    int aacplaylen = 0;
    char *pcmplaybuf = (char*)malloc(1024*1024*2);
    int pcmplaylen=0;


    nRead = RTMP_Read(rtmp, buf, bufsize);

    NeAACDecFrameInfo frame_info;
	NeAACDecHandle hdecoder = 0;
	unsigned long samplerate = 0;
	unsigned char channels = 0;
	ADTS_HEADER adtsheader;
	ADTS_HEADER adtsheader_t;
	int ret = 0;
	unsigned char * pcm_buf;
//	int pcmplaylen = 0;

	//////////////////////////////////////////////////////////////////////////
	memset(&frame_info, 0, sizeof(frame_info));

	//分帧

//	aacplaybuf += ADTS_HEADER_LENGTH;
//	aacplaylen -= ADTS_HEADER_LENGTH;
//	memcpy(m_onfreamebuf_aac + ADTS_HEADER_LENGTH, aacplaybuf,
//			adtsheader.aac_frame_length - ADTS_HEADER_LENGTH);
//	aacplaybuf += adtsheader.aac_frame_length - ADTS_HEADER_LENGTH;
//	aacplaylen -= adtsheader.aac_frame_length - ADTS_HEADER_LENGTH;

	aacplaybuf[0]=0xff;aacplaybuf[1]=0xf0;
	aacplaybuf[2]=0xa0;aacplaybuf[3]=0x40;
	aacplaybuf[4]=0x17;aacplaybuf[5]=0xbf;
	aacplaybuf[6]=0xfc;
	buf += 9;
	if(*buf!=8){
		printf("error ....");
	}
	unsigned int temp=0;
	buf++;
	temp |= (*buf)<<16;
	buf++;
	temp |= (*buf)<<8;
	buf++;
	temp |= (unsigned char)(*buf);
	aacplaylen = (int)temp;
//	adtsheader.aac_frame_length = aacplaylen + 7;

	Detach_Head_Aac(&adtsheader, aacplaybuf);
	memcpy(m_onfreamebuf_aac,aacplaybuf,7);
	memcpy(m_onfreamebuf_aac+7,buf,aacplaylen);

	//* 打开解码器
	hdecoder = NeAACDecOpen();

#if 1
	NeAACDecConfigurationPtr conf = NeAACDecGetCurrentConfiguration(hdecoder);
	conf->dontUpSampleImplicitSBR = 1;
	NeAACDecSetConfiguration(hdecoder, conf);
#endif

	ret = NeAACDecInit(hdecoder, m_onfreamebuf_aac, adtsheader.aac_frame_length,
			&samplerate, &channels);
	if (ret < 0) {
		printf("NeAACDecInit error\n");
	} else {
		printf("frame size %d\n", adtsheader.aac_frame_length);
		printf("samplerate %d, channels %d\n", samplerate, channels);
	}
	pcm_buf = m_onfreamebuf_pcm;
	memset(m_onfreamebuf_aac, 0, MAXONFREAMSIZE_AAC);
	memset(m_onfreamebuf_pcm, 0, MAXONFREAMSIZE_PCM);


//	if( !ap.Open( play_url ) ) //jyc20170527 need ffmpeg
//	{
//		goto end_OnProc;
//	}

	//bool doOpenLocal = false; //jyc20170330 move up goto
	//bool hasSuccess = false;
	if( !param.vecdev.empty() )
	{
		for( size_t i=0; i<param.vecdev.size(); ++i )
		{
			//if( g_AddPlayOut( ap, param.vecdev[i], m_ITalkNotify ) )
			if(1) //jyc20170602 debug
			{
				hasSuccess = true;
				successDevlst.push_back( param.vecdev[i] );
			}
			else
			{
				failedDevlst.push_back( param.vecdev[i] );
			}
		}
	}
//	else //jyc20170606 remove
//	{
//		if( g_AddPlayOut( ap, GSIOTDeviceKey(), m_ITalkNotify ) )
//		{
//			hasSuccess = true;
//			successDevlst.push_back( GSIOTDeviceKey() );
//		}
//		else
//		{
//			failedDevlst.push_back( GSIOTDeviceKey() );
//		}
//	}

	// �첽֪ͨfrom_Jid�Ѳ���
	if( !param.from_Jid.empty() )
	{
		if( m_ITalkNotify )
		{
			m_ITalkNotify->OnTalkNotify( hasSuccess?XmppGSTalk::defTalkCmd_session:XmppGSTalk::defTalkCmd_quit, param.url, param.from_Jid, param.from_id, true, successDevlst, hasSuccess );
		}
	}

	if( !successDevlst.empty() )
	{
		successDevlst.clear();
	}

	if( !failedDevlst.empty() )
	{
		if( m_ITalkNotify )
		{
			m_ITalkNotify->OnTalkNotify( XmppGSTalk::defTalkCmd_adddev, param.url, param.from_Jid, param.from_id, true, failedDevlst, false );
		}

		failedDevlst.clear();
	}

	Player playtest;
	playtest.initPlayer();
	while (nRead = RTMP_Read(rtmp, buf, bufsize))
	{
		if(*buf!=8)continue; //flv
		unsigned int temp=0;
		buf++;
		temp |= (*buf)<<16;
		buf++;
		temp |= (*buf)<<8;
		buf++;
		temp |= (unsigned char)*buf;

//		aacplaybuf[0]=0xff;aacplaybuf[1]=0xf0;aacplaybuf[2]=0xe0;
//		aacplaybuf[3]=0x40;aacplaybuf[4]=0x17;
//		aacplaybuf[5]=0xbf;aacplaybuf[6]=0xfc;

		aacplaybuf[0] = 0xff;aacplaybuf[1] = 0xf0;
		aacplaybuf[2] = 0xa0;aacplaybuf[3] = 0x40;
		aacplaybuf[4] = 0x17;aacplaybuf[5] = 0xbf;
		aacplaybuf[6] = 0xfc;

		aacplaybuf[3]|=(temp&0x1800)>>11;
		aacplaybuf[4] =(temp&0x07f8)>>3;
		aacplaybuf[5]&= 0x1f;
		aacplaybuf[5]|=(temp&0x0007)<<5;

		aacplaylen = (int)temp;
		if(aacplaylen<0)
			break;
//		adtsheader.aac_frame_length = aacplaylen + 7;

		buf += 8;
		if(((unsigned char)*buf &0xf0)!=0xa0)continue; //aac
		buf++;

		Detach_Head_Aac(&adtsheader, aacplaybuf);
		memcpy(m_onfreamebuf_aac,aacplaybuf,7);
		memcpy(m_onfreamebuf_aac+7,buf,aacplaylen);

		memset(&frame_info, 0, sizeof(frame_info)); //jyc20170606 add
		//decode ADTS frame
		pcm_buf = (unsigned char *) NeAACDecDecode(hdecoder, &frame_info,
				m_onfreamebuf_aac, adtsheader.aac_frame_length);

		if (frame_info.error > 0) {
			printf("%s\n", NeAACDecGetErrorMessage(frame_info.error));
		} else if (pcm_buf && frame_info.samples > 0) {
			printf(
					"frame info: bytesconsumed %d, channels %d, header_type %d\object_type %d, samples %d, samplerate %d\n",
					frame_info.bytesconsumed, frame_info.channels,
					frame_info.header_type, frame_info.object_type,
					frame_info.samples, frame_info.samplerate);
					memcpy(&pcmplaybuf[pcmplaylen], pcm_buf,
					frame_info.samples * frame_info.channels);
			pcmplaylen += frame_info.samples * frame_info.channels;
		}
		memset(m_onfreamebuf_aac, 0, MAXONFREAMSIZE_AAC);
		memset(m_onfreamebuf_pcm, 0, MAXONFREAMSIZE_PCM);


//		pcmplaylen = accdecoder(aacplaybuf, aacplaylen+7, pcmplaybuf);

		playtest.play(pcmplaybuf, pcmplaylen);

//		memcpy(&aacplaybuf[aacplaylen], buf, nRead);
//		aacplaylen += nRead;
//		pcmplaylen = accdecoder(buf, nRead, pcmplaybuf);
//		playtest.play(pcmplaybuf, pcmplaylen);

//		printf("RTMP_READ size = %d\n",nRead);
	}

//	pcmplaylen = accdecoder(aacplaybuf, aacplaylen, pcmplaybuf);
//	playtest.play(pcmplaybuf, pcmplaylen);

	free(aacplaybuf);
	free(pcmplaybuf);
	NeAACDecClose(hdecoder);


//	return;

//	// һֱѭ������
//	while( UrlKey_IsPlaying( param.url, param.key, vecTalkParam, true ) )
//	{
//		if( !ap.Play( failedDevlst ) )
//		{
//			break;
//		}
//
//		if( !failedDevlst.empty() )
//		{
//			if( m_ITalkNotify )
//			{
//				m_ITalkNotify->OnTalkNotify( XmppGSTalk::defTalkCmd_removedev, param.url, param.from_Jid, param.from_id, false, failedDevlst, true );
//			}
//
//			failedDevlst.clear();
//		}
//
//		if( !vecTalkParam.empty() )
//		{
//			g_OnProc_TalkParam( Play_id, ap, vecTalkParam, m_ITalkNotify );
//			vecTalkParam.clear();
//		}
//
//		UrlKey_Check( false );
//	}

	LOGMSG( "TalkMgr::OnProc(%d) APlayer.Close(%s), from_Jid=\"%s\", from_id=\"%s\"", Play_id, play_url.c_str(), param.from_Jid.c_str(), param.from_id.c_str() );
//	ap.Close(); //jyc20170606 remove

end_OnProc:

	UrlKey_Del( param.url, param.key );

	// �첽֪ͨfrom_Jid�������˳�
	if( !param.from_Jid.empty() )
	{
		if( m_ITalkNotify )
		{
			const defvecDevKey c_vecdev;
			m_ITalkNotify->OnTalkNotify( XmppGSTalk::defTalkCmd_quit, param.url, param.from_Jid, param.from_id, false, c_vecdev );
		}
	}
}

// ���������߳�
// isOnlyOneTalk: ֻ����һ������ʱ��ֹͣ�������в��ţ��ٴ����²���
// doforce: ���Ѿ��ڲ��ţ���ﵽ����ʱ��true��ʾǿ�Ƹ��ǽ����²���
defGSReturn GSRemoteTalkMgr::StartTalk( const std::string &url, const std::string &from_Jid, const std::string &from_id, const defvecDevKey &vecdev, const bool doforce, const bool isOnlyOneTalk )
{
	if( url.empty() )
	{
		LOGMSG( "TalkMgr::StartTalk url is null!" );
		return defGSReturn_Err;
	}

	UrlKey_Check( true );

	// ָ�������豸
	if( vecdev.size() <= 1 )
	{
		IOTDeviceType dev_type = IOT_DEVICE_Unknown;
		int dev_id = 0;

		if( vecdev.size() > 0 )
		{
			dev_type = vecdev[0].m_type;
			dev_id = vecdev[0].m_id;
		}

		if( IOT_DEVICE_Unknown != dev_type && dev_id>0 )
		{
			GSIOTDevice *pDev = NULL;
			if( m_ITalkNotify )
			{
				const defvecDevKey c_vecdev;
				pDev = (GSIOTDevice*)m_ITalkNotify->OnTalkNotify( XmppGSTalk::defTalkSelfCmd_GetDevice, "", "", "", true, c_vecdev, true, dev_type, dev_id );
			}

			if( pDev && pDev->GetEnable() && pDev->getControl() )
			{
				IPCameraBase *cam_ctl = (IPCameraBase*)pDev->getControl();
				if( cam_ctl->isTalkUseCam() ) // �Ƿ�ʹ������ͷ�Խ�
				{
					if( !cam_ctl->isTalkSupport() )
					{
						LOGMSG( "TalkMgr::StartTalk faild! cam(type=%d, id=%d) isTalkSupport=false", dev_type, dev_id );
						return defGSReturn_NoExist;
					}
				}
				else
				{
					return defGSReturn_NoExist;
				}
			}
			else
			{
				return defGSReturn_NoExist;
			}
		}
	}

	bool isOnlyOneTalk_cur = false;
	unsigned long curPlayCount = 0;
	unsigned long curQueueCount = 0;
	GetCountInfo( curQueueCount, curPlayCount, isOnlyOneTalk_cur );

	LOGMSG( "TalkMgr::StartTalk curInfo(PlayCnt=%lu, QueueCnt=%lu, isOnlyOneTalk_cur=%d), new: isOnlyOneTalk=%d, doforce=%d, devnum=%d, url=\"%s\", from_Jid=\"%s\", from_id=\"%s\"", 
		curPlayCount, curQueueCount, isOnlyOneTalk_cur, 
		isOnlyOneTalk, doforce, vecdev.size(), url.c_str(), from_Jid.c_str(), from_id.c_str() );

	if( curQueueCount >= MAX_TalkQueueSize )
	{
		LOGMSG( "TalkMgr::StartTalk MAX_TalkQueue(%d) is full, faild!", curQueueCount );

		return defGSReturn_IsLock;
	}

	 // �Ƿ��Ѿ����ڲ���
	if( isPlaying(isOnlyOneTalk_cur) )
	{
		// ��Ҫ���ó�ֻ����һ��
		if( isOnlyOneTalk || isOnlyOneTalk_cur )
		{
			if( !doforce )
			{
				LOGMSG( "TalkMgr::StartTalk have isPlaying, failed!" );
				return defGSReturn_IsLock;
			}

			StopTalk_All();
		}
		else // ����������
		{
			bool isOnlyOneTalk_byurl = false;
			const bool isplaying_url = isPlaying_url( url, isOnlyOneTalk_byurl );
			if( isplaying_url )
			{
				if( !doforce )
				{
					LOGMSG( "TalkMgr::StartTalk isPlaying this url=\"%s\"", url.c_str() );
					return defGSReturn_IsLock;
				}
			}

			if( curPlayCount >= MAX_TALK )
			{
				if( !doforce )
				{
					LOGMSG( "TalkMgr::StartTalk isPlaying MAX_TALK, failed!" );
					return defGSReturn_IsLock;
				}

				if( isplaying_url )
				{
					LOGMSG( "TalkMgr::StartTalk is MAX_TALK, call StopTalk(%s).", url.c_str() );
					StopTalk( url );
				}
				else
				{
					LOGMSG( "TalkMgr::StartTalk is MAX_TALK, call StopTalk_AnyOne." );
					StopTalk_AnyOne();
				}
			}
		}
	}
	else
	{
		// ��ǰû���ڲ��ţ���ֱ�Ӳ���
	}

	if( !NewPlay_ParamPush( struNewPlay_Param( XmppGSTalk::defTalkCmd_session, url, from_Jid, from_id, isOnlyOneTalk, vecdev ) ) )
	{
		return defGSReturn_IsLock;
	}

	/*
	HANDLE   hth1;
	unsigned  uiThread1ID;
	hth1 = (HANDLE)_beginthreadex( NULL, 0, APlayThread, this, 0, &uiThread1ID );
	CloseHandle(hth1);
	*/

	pthread_t id_1;
    int ret=pthread_create(&id_1,NULL,APlayThread,this);
    if(ret!=0)  
    {  
        printf("Create APlayThread error!\n");
		return defGSReturn_Err;  
    } 

	return defGSReturn_Success;
}

defGSReturn GSRemoteTalkMgr::AdddevTalk( const std::string &url, const std::string &from_Jid, const std::string &from_id, const defvecDevKey &vecdev )
{
	if( !UrlKey_push_cmd( url, struNewPlay_Param( XmppGSTalk::defTalkCmd_adddev, url, from_Jid, from_id, false, vecdev ) ) )
	{
		defGSReturn_Err;
	}

	return defGSReturn_Success;
}

defGSReturn GSRemoteTalkMgr::RemovedevTalk( const std::string &url, const std::string &from_Jid, const std::string &from_id, const defvecDevKey &vecdev )
{
	if( !UrlKey_push_cmd( url, struNewPlay_Param( XmppGSTalk::defTalkCmd_removedev, url, from_Jid, from_id, false, vecdev ) ) )
	{
		defGSReturn_Err;
	}

	return defGSReturn_Success;
}

// ָ����� url�Ȳ����ֹͣ���ţ�ֻ����ֹͣ��־��������ɾ���߳�ֹͣ�����ɾ��
bool GSRemoteTalkMgr::StopTalk( const std::string &url )
{
	if( url == "all" )
	{
		return StopTalk_All();
	}
	else
	{
		gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

		if( m_mapTalk.empty() )
		{
			LOGMSG( "TalkMgr::StopTalk mapTalk is empty" );
			return true;
		}

		defmapTalk::iterator it = m_mapTalk.find( url );
		if( it != m_mapTalk.end() )
		{
			LOGMSG( "TalkMgr::StopTalk url=\"%s\"", url.c_str() );

			it->second.set_play( false );
			return true;
		}

		LOGMSG( "TalkMgr::StopTalk not found url=\"%s\"", url.c_str() );
	}

	return false;
}

// ��ֹͣ
bool GSRemoteTalkMgr::StopTalk_All()
{
	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	if( m_mapTalk.empty() )
		return true;

	defmapTalk::iterator it = m_mapTalk.begin();
	for( ; it != m_mapTalk.end(); ++it )
	{
		LOGMSG( "TalkMgr::StopTalk_All url=\"%s\"", it->first.c_str() );

		it->second.set_play( false );
	}

	return true;
}

// ����һ��������ֹͣ
bool GSRemoteTalkMgr::StopTalk_AllButOneTalk()
{
	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	if( m_mapTalk.empty() )
		return true;

	bool isFoundPlay = false;
	defmapTalk::iterator it = m_mapTalk.begin();
	for( ; it != m_mapTalk.end(); ++it )
	{
		if( it->second.play )
		{
			if( isFoundPlay )
			{
				LOGMSG( "TalkMgr::StopTalk_AllButOneTalk url=\"%s\"", it->first.c_str() );

				it->second.set_play( false );
			}
			else
			{
				// ��һ����ֹͣ
				isFoundPlay = true;
			}
		}
	}

	return true;
}

// ֹͣһ����������
bool GSRemoteTalkMgr::StopTalk_AnyOne()
{
	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	if( m_mapTalk.empty() )
		return true;

	defmapTalk::iterator it = m_mapTalk.begin();
	for( ; it != m_mapTalk.end(); ++it )
	{
		if( it->second.play )
		{
			LOGMSG( "TalkMgr::StopTalk_AnyOne url=\"%s\"", it->first.c_str() );

			it->second.set_play( false );
			return true;
		}
	}

	return true;
}

// �Ƿ����ڲ���
bool GSRemoteTalkMgr::isPlaying( bool &isOnlyOneTalk )
{
	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	isOnlyOneTalk = false;
	if( m_mapTalk.empty() )
		return false;

	defmapTalk::const_iterator it = m_mapTalk.begin();
	for( ; it != m_mapTalk.end(); ++it )
	{
		if( it->second.play )
		{
			isOnlyOneTalk = it->second.isOnlyOneTalk;
			return true;
		}
	}

	return false;
}

// ָ����� url ���Ƿ��ڲ���
bool GSRemoteTalkMgr::isPlaying_url( const std::string &url, bool &isOnlyOneTalk, bool iskeepalive )
{
	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	isOnlyOneTalk = false;
	if( url.empty() )
		return false;

	defmapTalk::iterator it = m_mapTalk.find( url );
	if( it != m_mapTalk.end() )
	{
		isOnlyOneTalk = it->second.isOnlyOneTalk;
		if( iskeepalive )
		{
			it->second.keepalive_ts = timeGetTime();
		}
		return it->second.play;
	}

	return false;
}

// ��ȡͳ����Ϣ
void GSRemoteTalkMgr::GetCountInfo( unsigned long &QueueCount, unsigned long &PlayCount, bool &isOnlyOneTalk )
{
	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	GetCountInfoForMap( m_mapTalk, QueueCount, PlayCount, isOnlyOneTalk );
}

bool GSRemoteTalkMgr::CopyMapTalk( defmapTalk &mapTalk )
{
	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	mapTalk = m_mapTalk;
	return true;
}

// �洢�²��Ų���
bool GSRemoteTalkMgr::NewPlay_ParamPush( const struNewPlay_Param &param )
{
	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	// �Ѵ�������ִ�еĲ���
	if( !m_newPlay_param.url.empty() )
	{
		if( timeGetTime()-m_ts_newPlay_param <= defValidTime_newPlay_param )
		{
			//LOGMSGEX( defLOGNAME, defLOG_ERROR, "TalkMgr::NewPlay_ParamPush failed! isbeing ts delay=%dms", timeGetTime()-m_ts_newPlay_param );
			return false;
		}
	}

	m_newPlay_param = param;
	m_newPlay_param.key = UrlKey_Add_nolock( m_newPlay_param );
	m_ts_newPlay_param = timeGetTime();
	return true;
}

// ȡ���²��Ų���
bool GSRemoteTalkMgr::NewPlay_ParamPop( struNewPlay_Param &param )
{
	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	if( m_newPlay_param.url.empty() )
	{
		//LOGMSGEX( defLOGNAME, defLOG_ERROR, "TalkMgr::NewPlay_ParamPop failed! url is null" );
		return false;
	}

	if( timeGetTime()-m_ts_newPlay_param > defValidTime_newPlay_param )
	{
		//LOGMSGEX( defLOGNAME, defLOG_ERROR, "TalkMgr::NewPlay_ParamPop failed! ts over delay=%dms", timeGetTime()-m_ts_newPlay_param );
		m_newPlay_param.url = "";
		m_newPlay_param.from_Jid = "";
		m_newPlay_param.from_id = "";
		return false;
	}

	param = m_newPlay_param;

	m_newPlay_param.url = "";
	m_newPlay_param.from_Jid = "";
	m_newPlay_param.from_id = "";
	return true;
}

// ���һ�����ż�¼
unsigned long GSRemoteTalkMgr::UrlKey_Add_nolock( const struNewPlay_Param &param )
{
	//gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	if( param.url.empty() )
		return 0;

	m_last_key++;
	m_mapTalk[param.url] = struTalkState( m_last_key, true, param.isOnlyOneTalk, param.from_Jid, param.from_id );

	LOGMSG( "TalkMgr::UrlKey_Add aftersize=%d, isOnlyOneTalk=%d, key=%lu, url=\"%s\", from_Jid=\"%s\", from_id=\"%s\"",
		m_mapTalk.size(), param.isOnlyOneTalk, m_last_key, param.url.c_str(), param.from_Jid.c_str(), param.from_id.c_str() );

	return m_last_key;
}

// ��������������
bool GSRemoteTalkMgr::UrlKey_push_cmd( const std::string &url, const struNewPlay_Param &param )
{
	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	if( url.empty() )
		return false;

	defmapTalk::iterator it = m_mapTalk.find( url );
	if( it != m_mapTalk.end() )
	{
		if( it->second.play )
		{
			if( it->second.vecTalkParam.size() < 99 )
			{
				it->second.vecTalkParam.push_back(param);
				//jyc20170330 remove
				//LOGMSG( "TalkMgr::UrlKey_push_cmd success, cmd=\"%s\", from_Jid=\"%s\", url=\"%s\"", XmppGSTalk::TalkCmd2String(param.cmd).c_str(), param.from_Jid.c_str(), url.c_str() );
				return true;
			}
			else
			{
				LOGMSG( "TalkMgr::UrlKey_push_cmd vec full, url=\"%s\"", url.c_str() );
				return false;
			}
		}
		else
		{
			LOGMSG( "TalkMgr::UrlKey_push_cmd not play, url=\"%s\"", url.c_str() );
			return false;
		}
	}

	LOGMSG( "TalkMgr::UrlKey_push_cmd not found, url=\"%s\"", url.c_str() );
	return false;
}

// �����߳�ֹͣ��ִ��ɾ��ż�¼��������keyһ�¡�
bool GSRemoteTalkMgr::UrlKey_Del( const std::string &url, const unsigned long key )
{
	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	if( m_mapTalk.empty() )
		return true;

	defmapTalk::iterator it = m_mapTalk.find( url );
	if( it != m_mapTalk.end() )
	{
		if( key == it->second.key )
		{
			const unsigned long usems = timeGetTime()-it->second.ts;
			m_mapTalk.erase(it);

			LOGMSG( "TalkMgr::UrlKey_Del aftersize=%d, key=%lu, quitusetime=%lums, url=\"%s\"", m_mapTalk.size(), key, usems, url.c_str() );
			return true;
		}
	}

	return false;
}

// ָ����� url �� key ���Ƿ��ڲ���
bool GSRemoteTalkMgr::UrlKey_IsPlaying( const std::string &url, const unsigned long key, defvecTalkParam &vecTalkParam, bool popcmd )
{
	if( !vecTalkParam.empty() )
	{
		vecTalkParam.clear();
	}

	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	if( url.empty() )
		return false;

	defmapTalk::iterator it = m_mapTalk.find( url );
	if( it != m_mapTalk.end() )
	{
		if( key == it->second.key )
		{
			if( popcmd )
			{
				vecTalkParam.swap( it->second.vecTalkParam );
			}
			it->second.set_IsPlaying_ts();
			return it->second.play;
		}
		else
		{
			LOGMSG( "TalkMgr::UrlKey_IsPlaying false key diff, in_key=%lu, play_key=%lu, url=\"%s\"", key, it->second.key, url.c_str() );
			return false;
		}
	}

	return false;
}

// ����Ƿ�ֻ����һ��������ǣ�����һ��ֹͣ����
void GSRemoteTalkMgr::UrlKey_Check( bool forceCheck )
{
	const uint32_t curtime = timeGetTime();
	gloox::util::MutexGuard mutexguard( m_mutex_TalkMgr );

	// ÿ������һ��
	if( !forceCheck
		 && (curtime-m_last_checktime) < 5000
		)
	{
		return;
	}

	m_last_checktime = curtime;
	if( m_mapTalk.empty() )
		return;

	defmapTalk::iterator it = m_mapTalk.begin();
	for( ; it != m_mapTalk.end(); ++it )
	{
		if( it->second.isOnlyOneTalk
			&& it->second.play )
		{
			// ����һ��ֹͣ����
			bool isFoundPlay = false;
			it = m_mapTalk.begin();
			for( ; it != m_mapTalk.end(); ++it )
			{
				if( it->second.play )
				{
					if( isFoundPlay )
					{
						LOGMSG( "TalkMgr::UrlKey_Check StopTalk key=%lu, url=\"%s\"", it->second.key, it->first.c_str() );

						it->second.set_play( false );
					}
					else
					{
						// ��һ����ֹͣ
						isFoundPlay = true;
					}
				}
			}

			break;
		}
	}

	it = m_mapTalk.begin();
	for( ; it != m_mapTalk.end(); ++it )
	{
		if( !it->second.play )
		{
			if( curtime - it->second.ts > 60000 )
			{
				LOGMSG( "TalkMgr::UrlKey_Check play set false timeout key=%lu, url=\"%s\"", it->second.key, it->first.c_str() );

				m_mapTalk.erase(it);
				it = m_mapTalk.begin();
			}
		}
		else
		{
			if( curtime - it->second.IsPlaying_ts > 60000 )
			{
				LOGMSG( "TalkMgr::UrlKey_Check IsPlaying_ts timeover key=%lu, url=\"%s\"", it->second.key, it->first.c_str() );

				m_mapTalk.erase(it);
				it = m_mapTalk.begin();
			}

			if( curtime - it->second.keepalive_ts > 60000 )
			{
				LOGMSG( "TalkMgr::UrlKey_Check keepalive_ts timeover key=%lu, url=\"%s\"", it->second.key, it->first.c_str() );

				m_mapTalk.erase(it);
				it = m_mapTalk.begin();
			}
		}
	}
}
