#include "GsCamera.h"

/*
 * camera_yuv_x264.cpp
 */

#include <stdint.h>
#include <opencv/highgui.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>

#define CLEAR(x) (memset((&x),0,sizeof(x)))
#define IMAGE_WIDTH   320
#define IMAGE_HEIGHT  240
#define ENCODER_PRESET "veryfast"
#define widthStep 960
//widthStep为图像宽度的3倍
/*配置参数
 * 使用默认参数，在这里使用了zerolatency的选项，使用这个选项之后，就不会有
 * delayed_frames，如果你使用不是这个的话，还需要在编码完成之后得到缓存的
 * 编码帧
 */
#define ENCODER_TUNE   "zerolatency"
#define ENCODER_PROFILE  "baseline"
#define ENCODER_COLORSPACE X264_CSP_I420

extern "C" {
#include "x264.h"
typedef struct my_x264_encoder {
	x264_param_t * x264_parameter;
	char parameter_preset[20];
	char parameter_tune[20];
	char parameter_profile[20];
	x264_t * x264_encoder;
	x264_picture_t * yuv420p_picture;
	long colorspace;
	unsigned char *yuv;
	x264_nal_t * nal;
} my_x264_encoder;
}

//typedef struct my_x264_encoder {
//	x264_param_t * x264_parameter;
//	char parameter_preset[20];
//	char parameter_tune[20];
//	char parameter_profile[20];
//	x264_t * x264_encoder;
//	x264_picture_t * yuv420p_picture;
//	long colorspace;
//	unsigned char *yuv;
//	x264_nal_t * nal;
//} my_x264_encoder;

//global variable
char *write_filename = "test0513.264";
int ii = 1000; //frames_total，这里设置你需要录制多少帧
IplImage * img;
CvCapture * cap;
unsigned char * RGB1;

//在RGB2YUV.cpp中
void Convert(unsigned char *RGB, unsigned char *YUV, unsigned int width,
		unsigned int height);

void getyuv(unsigned char *yuv) {
	img = cvQueryFrame(cap);
	for (int i = 0; i < IMAGE_HEIGHT; i++) {
		for (int j = 0; j < IMAGE_WIDTH; j++) {
			RGB1[(i * IMAGE_WIDTH + j) * 3] = img->imageData[i * widthStep
					+ j * 3 + 2];
			;
			RGB1[(i * IMAGE_WIDTH + j) * 3 + 1] = img->imageData[i * widthStep
					+ j * 3 + 1];
			RGB1[(i * IMAGE_WIDTH + j) * 3 + 2] = img->imageData[i * widthStep
					+ j * 3];
		}
	}
	Convert(RGB1, yuv, IMAGE_WIDTH, IMAGE_HEIGHT);
}

int video() {
	int ret;

	my_x264_encoder * encoder = (my_x264_encoder *) malloc(	sizeof(my_x264_encoder));
	if (!encoder) {
		printf("cannot malloc my_x264_encoder !\n");
		exit(EXIT_FAILURE);
	}
	CLEAR(*encoder);

	//摄像头初始化
	cap = cvCreateCameraCapture(0);
	cvSetCaptureProperty(cap, CV_CAP_PROP_FRAME_WIDTH, IMAGE_WIDTH);
	cvSetCaptureProperty(cap, CV_CAP_PROP_FRAME_HEIGHT, IMAGE_HEIGHT);

	//分配RGB空间，用于提取IplImage中的image_data
	RGB1 = (unsigned char *) malloc(IMAGE_HEIGHT * IMAGE_WIDTH * 3);

	/****************************************************************************
	 * encoder结构体初始化
	 ****************************************************************************/
	strcpy(encoder->parameter_preset, ENCODER_PRESET);
	strcpy(encoder->parameter_tune, ENCODER_TUNE);

	encoder->x264_parameter = (x264_param_t *) malloc(sizeof(x264_param_t));
	if (!encoder->x264_parameter) {
		printf("malloc x264_parameter error!\n");
		exit(EXIT_FAILURE);
	}

	/*初始化编码器*/
	CLEAR(*(encoder->x264_parameter));
	x264_param_default(encoder->x264_parameter);

	if ((ret = x264_param_default_preset(encoder->x264_parameter,
			encoder->parameter_preset, encoder->parameter_tune)) < 0) {
		printf("x264_param_default_preset error!\n");
		exit(EXIT_FAILURE);
	}

	/*cpuFlags 去空缓冲区继续使用不死锁保证*/
	encoder->x264_parameter->i_threads = X264_SYNC_LOOKAHEAD_AUTO;
	/*视频选项*/
	encoder->x264_parameter->i_width = IMAGE_WIDTH; //要编码的图像的宽度
	encoder->x264_parameter->i_height = IMAGE_HEIGHT; //要编码的图像的高度
	encoder->x264_parameter->i_frame_total = 0; //要编码的总帧数，不知道用0
	encoder->x264_parameter->i_keyint_max = 10; //一般为i_fps_num的一倍或两倍，视频文件总时间=总帧数/该值，time = ii / i_keyint_max;
	/*流参数*/
	encoder->x264_parameter->i_bframe = 5;
	encoder->x264_parameter->b_open_gop = 0;
	encoder->x264_parameter->i_bframe_pyramid = 0;
	encoder->x264_parameter->i_bframe_adaptive = X264_B_ADAPT_TRELLIS;

	/*log参数，不需要打印编码信息时直接注释掉*/
	encoder->x264_parameter->i_log_level = X264_LOG_DEBUG;

	encoder->x264_parameter->i_fps_num = 10; //码率分子
	encoder->x264_parameter->i_fps_den = 1; //码率分母

	encoder->x264_parameter->b_intra_refresh = 1;
	encoder->x264_parameter->b_annexb = 1;

	strcpy(encoder->parameter_profile, ENCODER_PROFILE);
	if ((ret = x264_param_apply_profile(encoder->x264_parameter,
			encoder->parameter_profile)) < 0) {
		printf("x264_param_apply_profile error!\n");
		exit(EXIT_FAILURE);
	}
	/*打开编码器*/
	encoder->x264_encoder = x264_encoder_open(encoder->x264_parameter);
	encoder->colorspace = ENCODER_COLORSPACE;

	/*初始化pic*/
	encoder->yuv420p_picture = (x264_picture_t *) malloc(
			sizeof(x264_picture_t));
	if (!encoder->yuv420p_picture) {
		printf("malloc encoder->yuv420p_picture error!\n");
		exit(EXIT_FAILURE);
	}
	if ((ret = x264_picture_alloc(encoder->yuv420p_picture, encoder->colorspace,
			IMAGE_WIDTH, IMAGE_HEIGHT)) < 0) {
		printf("ret=%d\n", ret);
		printf("x264_picture_alloc error!\n");
		exit(EXIT_FAILURE);
	}

	encoder->yuv420p_picture->img.i_csp = encoder->colorspace;
	encoder->yuv420p_picture->img.i_plane = 3;
	encoder->yuv420p_picture->i_type = X264_TYPE_AUTO;

	/*申请YUV buffer*/
	encoder->yuv = (uint8_t *) malloc(IMAGE_WIDTH * IMAGE_HEIGHT * 3 / 2);
	if (!encoder->yuv) {
		printf("malloc yuv error!\n");
		exit(EXIT_FAILURE);
	}
	CLEAR(*(encoder->yuv));
	encoder->yuv420p_picture->img.plane[0] = encoder->yuv;
	encoder->yuv420p_picture->img.plane[1] = encoder->yuv
			+ IMAGE_WIDTH * IMAGE_HEIGHT;
	encoder->yuv420p_picture->img.plane[2] = encoder->yuv
			+ IMAGE_WIDTH * IMAGE_HEIGHT + IMAGE_WIDTH * IMAGE_HEIGHT / 4;

	encoder->nal = (x264_nal_t *) calloc(2, sizeof(x264_nal_t)); //一般一帧分为两个nal，不行的话就改3-8
	if (!encoder->nal) {
		printf("malloc x264_nal_t error!\n");
		exit(EXIT_FAILURE);
	}
	CLEAR(*(encoder->nal));
	//////////////////////////////////////////////////////////////////////////////////
	/************************* init finished ****************************************/

	int fd_write;
	if ((fd_write = open(write_filename, O_WRONLY | O_CREAT, 0777)) < 0) { //| O_APPEND
		printf("cannot open output file!\n");
		exit(EXIT_FAILURE);
	}
	int n_nal = 0;
	x264_picture_t pic_out;
	x264_nal_t *my_nal;

	/*Encode*/
	while (ii--) {
		getyuv(encoder->yuv);
		encoder->yuv420p_picture->i_pts++;
		if ((ret = x264_encoder_encode(encoder->x264_encoder, &encoder->nal,
				&n_nal, encoder->yuv420p_picture, &pic_out)) < 0) {
			printf("x264_encoder_encode error!\n");
			exit(EXIT_FAILURE);
		}
		for (my_nal = encoder->nal; my_nal < encoder->nal + n_nal; ++my_nal) {
			write(fd_write, my_nal->p_payload, my_nal->i_payload);
		}
	}

	free(encoder->yuv);
	free(encoder->yuv420p_picture);
	free(encoder->x264_parameter);
	x264_encoder_close(encoder->x264_encoder);
	free(encoder);
	//close(fd_read); //jyc20170510
	close(fd_write);

	return 0;
}

defGSReturn hikErr2GSErr(const DWORD nErr) {
	return defGSReturn_Err; // 无明确匹配的错误码，具体错误需要再根据其它判断
}

uint32_t hikTransVideoBitrate(const DWORD dwVideoBitrate) {
	/*
	 视频码率:0-保留，1-16K(保留)，2-32K，3-48k，4-64K，5-80K，6-96K，7-128K，8-160k，9-192K，10-224K，
	 11-256K，12-320K，13-384K，14-448K，15-512K，16-640K，17-768K，18-896K，19-1024K，20-1280K，21-1536K，22-1792K，23-2048K，
	 24-3072K，25-4096K，26-8192K，27-16384K。最高位(31位)置成1表示是自定义码流，0～30位表示码流值，最小值16k,0xfffffffe，自动，和源一致
	 */

	switch (dwVideoBitrate) {
	case 1:
		return 16000;
	case 2:
		return 32000;
	case 3:
		return 48000;
	case 4:
		return 64000;
	case 5:
		return 80000;
	case 6:
		return 96000;
	case 7:
		return 128000;
	case 8:
		return 160000;
	case 9:
		return 192000;
	case 10:
		return 224000;
	case 11:
		return 256000;
	case 12:
		return 320000;
	case 13:
		return 384000;
	case 14:
		return 448000;
	case 15:
		return 512000;
	case 16:
		return 640000;
	case 17:
		return 760000;
	case 18:
		return 896000;
	case 19:
		return 1024000;
	case 20:
		return 1280000;
	case 21:
		return 1536000;
	case 22:
		return 1792000;
	case 23:
		return 2048000;
	case 24:
		return 3072000;
	case 25:
		return 4096000;
	case 26:
		return 8192000;
	case 27:
		return 16384000;
	default: {
		if (dwVideoBitrate & 0x80000000) {
			return (dwVideoBitrate & 0x7FFFFFFF);
		}
	}
		break;
	}

	return 0;
}

//static bool getAlarmStr_MessageCallback(
//		std::string &alarmstr,
//		const LONG lCommand,
//		const defNS_HIK::NET_DVR_ALARMER *pAlarmer,
//		const char *pAlarmInfo,
//		const DWORD dwBufLen )
//{
//	return false;
//}

//void CALLBACK MessageCallback(LONG lCommand, defNS_HIK::NET_DVR_ALARMER *pAlarmer, char *pAlarmInfo, DWORD dwBufLen, void* pUser)
//{
//
//}

//void CALLBACK g_ExceptionCallBack(DWORD dwType, LONG lUserID, LONG lHandle, void *pUser)
//{
//	switch(dwType)
//	{
//	case EXCEPTION_RECONNECT:    //预览时重连
//		LOGMSGEX( defLOGNAME, defLOG_WORN, "----------HIK reconnect--------\r\n");
//		break;
//	default:
//		break;
//	}
//}

//void CALLBACK DataCallBack(LONG lRealHandle, DWORD dwDataType, BYTE *pBuffer,DWORD dwBufSize,DWORD lUser)
void DataCallBack(LONG lRealHandle, DWORD dwDataType, BYTE *pBuffer,
		DWORD dwBufSize, void* lUser) {
	if (0 == lUser) {
		return;
	}

	GsCamera *Camera = (GsCamera*) lUser;
	Camera->OnData(pBuffer, dwBufSize);
}

//void CALLBACK PlayDataCallBack_V40( LONG lPlayHandle, DWORD dwDataType, BYTE *pBuffer,DWORD dwBufSize,void *pUser )
//{
//	if( 0 == pUser )
//	{
//		return;
//	}
//
//	HikCamera *Camera = (HikCamera*)pUser;
//	Camera->OnData( lPlayHandle, dwDataType, pBuffer, dwBufSize );
//}
/*静态函数*/
void GsCamera::InitSDK(ICameraHandler *handler) {
	printf("......GsCamera::InitSDK.....\n");
//	g_ICameraAlarmRecv = hAlarmRecv;
//
//	defNS_HIK::NET_DVR_Init();
//    //defNS_HIK::NET_DVR_SetDVRMessageCallBack_V30(MessageCallback,(unsigned long)handler);
//	defNS_HIK::NET_DVR_SetDVRMessageCallBack_V30(MessageCallback,NULL);
//	defNS_HIK::NET_DVR_SetConnectTime(3000, 3);
//	defNS_HIK::NET_DVR_SetReconnect( 10000, TRUE );
//
//	//---------------------------------------
//	//设置异常消息回调函数
//	defNS_HIK::NET_DVR_SetExceptionCallBack_V30(0, NULL,g_ExceptionCallBack, NULL);
}

void GsCamera::Cleanup() {
	printf("......GsCamera::Cleanup.....\n");
	//defNS_HIK::NET_DVR_Cleanup();
}

bool GsCamera::GetChannelNum(char *sDVRIP, uint16_t wDVRPort, char *sUserName,
		char *sPassword, uint8_t &byChanNum, uint8_t &byStartChan,
		std::string &strErr) {
	char chbuf[256] = { 0 };

	byChanNum = 0;
	byStartChan = 0;
	strErr = "";

	printf("......GsCamera::GetChannelNum.....\n");

	return true;
}

bool GsCamera::GetCameraDevInfo(char *sDVRIP, uint16_t wDVRPort,
		char *sUserName, char *sPassword, const std::string &devname,
		std::string &strCamSerialNo, defvecChInfo &vecChInfo,
		std::string &strErr, const uint32_t streamfmt) {
	char chbuf[256] = { 0 };

	strErr = "";

	printf("......GsCamera::GetCameraDevInfo.....\n");

	return true;
}

defGSReturn GsCamera::SetCamTime_Spec(const struGSTime &newtime,
		const std::string &name, const std::string &sIP, uint16_t wPort,
		const std::string &sUserName, const std::string &sPassword) {
	printf("......GsCamera::SetCamTime_Spec.....\n");
	defGSReturn gsret = defGSReturn_Err;
	return gsret;
}

defGSReturn GsCamera::SetCamTime_ForLoginID(const struGSTime &newtime,
		const std::string &name, const long LoginID, const std::string &sIP,
		const uint16_t wPort) {
	printf("......GsCamera::SetCamTime_ForLoginID.....\n");
	defGSReturn gsret = defGSReturn_Err;
	return defGSReturn_ConnectObjErr;
}

GsCamera::GsCamera(const std::string& deviceID, const std::string& name,
		const std::string& ipaddress, uint32_t port,
		const std::string& username, const std::string& password,
		const std::string& ver, GSPtzFlag PTZFlag, GSFocalFlag FocalFlag,
		uint32_t channel, uint32_t streamfmt) :
		IPCameraBase(deviceID, name, ipaddress, port, username, password, ver,
				PTZFlag, FocalFlag, channel, streamfmt) {
	printf("......GsCamera::GsCamera.....\n");
	this->m_camera_hwnd = -1;
	this->m_playhandle = -1;
	this->m_AlarmChan = -1;
	this->m_isFirstAudio = true;
	this->m_AudioEncType = -1;
	this->m_pDecHandle = (void*) -1;

	this->m_lVoiceComHandle = -1;

	//memset( &m_sptr, 0, sizeof(m_sptr) ); //jyc20170512 remove
	//memset( &m_frame, 0, sizeof(m_frame) );

	m_timeMakeKeyFrame = timeGetTime() - 60000;
}

GsCamera::~GsCamera(void) {
	printf("......GsCamera::~GsCamera.....\n");
}

void GsCamera::PreinitBufCheck() {
	printf("......GsCamera::PreinitBufCheck.....\n");
}

bool GsCamera::TestConnect(std::string &strErr) {
	printf("......GsCamera::TestConnect.....\n");
	return true;
}

defGSReturn GsCamera::SetCamTime(const struGSTime &newtime) {
	printf("......GsCamera::SetCamTime.....\n");
	this->Login(false);
	return SetCamTime_ForLoginID(newtime, m_name, m_camera_hwnd,
			this->ConnUse_ip(), this->ConnUse_port());
}

defGSReturn GsCamera::Login(bool playback) {
	printf("......GsCamera::Login.....\n");
	return defGSReturn_Success;
}

// 连接建立告警通道
void GsCamera::ConnectAlarmGuard() {
	printf("......GsCamera::ConnectAlarmGuard.....\n");
}

// 连接建立告警通道
void GsCamera::DisconnectAlarmGuard() {
	printf("......GsCamera::DisconnectAlarmGuard.....\n");
}

void GsCamera::Logout() {
	printf("......GsCamera::Logout.....\n");
}

defGSReturn GsCamera::Connect(bool reconnectAudio, void* RealPlayWnd,
		bool playback, const struGSTime *pdtBegin, const struGSTime *pdtEnd) {
	printf("......GsCamera::Connect.....\n");
	ConnectBefore();
	if (this->IsConnect()) {
		this->OnDisconnct();
	}
	this->m_state.Reset();
	this->m_state.startTime = timeGetTime();

	this->m_camera_hwnd = 1;
	this->m_playhandle = 1;	//jyc20170512 add to debug

	defGSReturn ret = this->Login(playback);
	if (macGSFailed(ret)) {
		ConnectAfter();
		return ret;
	}

	LOGMSG("Cam:Connect(%s,%s:%d) Success. LoginID=%d\r\n",
			m_name.c_str() ? m_name.c_str() : "",
			(char *) this->ConnUse_ip(playback).c_str(),
			this->ConnUse_port(playback), this->m_camera_hwnd);

	m_isPlayBack = playback;

	if (m_isPlayBack) {
		return PlayBack(RealPlayWnd, pdtBegin, pdtEnd);
	}
	InitAudioEncType();
	ret = this->SetChannelStream(m_channel, reconnectAudio, RealPlayWnd);

	ConnectAfter();
	return ret;
}

bool GsCamera::isSupportAudioEncType(int AudioEncType) {
	printf("......GsCamera::isSupportAudioEncType.....\n");
	return false;
}

bool GsCamera::InitAudioEncType() {
	printf("......GsCamera::InitAudioEncType.....\n");
	return true;
}

defGSReturn GsCamera::SetChannelStream(int channel, bool reconnectAudio,
		void* RealPlayWnd) {
	//fp_send1 = fopen("/home/chen/projects/video/test.264","rb");
	//this->m_playhandle = defNS_HIK::NET_DVR_RealPlay_V40( this->m_camera_hwnd, &ClientInfo, DataCallBack, this );
	//TestCB(read_buffer1);
	return defGSReturn_Success;
}

defGSReturn GsCamera::PlayBack(void* RealPlayWnd, const struGSTime *pdtBegin,
		const struGSTime *pdtEnd) {
	printf("......GsCamera::PlayBack.....\n");
	return defGSReturn_Success;
}

defGSReturn GsCamera::QuickSearchPlayback(const struGSTime *pdtBegin,
		const struGSTime *pdtEnd) {
	printf("......GsCamera::QuickSearchPlayback.....\n");
	if (!pdtBegin || !pdtEnd)
		return defGSReturn_Err;
	return defGSReturn_Err;
}

int GsCamera::PlayBackControl(GSPlayBackCode_ ControlCode, void *pInBuffer,
		uint32_t InLen, void *pOutBuffer, uint32_t *pOutLen) {
	printf("......GsCamera::PlayBackControl.....\n");
	return -1;
}

void GsCamera::OnDisconnct() {
	printf("......GsCamera::OnDisconnct.....\n");
}

bool GsCamera::IsConnect() {
	printf("......GsCamera::IsConnect.....\n");
	return true; //jyc20170515 debug
	if (m_camera_hwnd >= 0 && m_playhandle >= 0) {
		return true;
	}
	return false;
}

void GsCamera::ResetBuf() {
	printf("......GsCamera::ResetBuf.....\n");
}

void GsCamera::SearchInit(ICameraHandler *handler) {
	printf("......GsCamera::SearchInit.....\n");
}

void GsCamera::SearchStart() {
	printf("......GsCamera::SearchStart.....\n");
}

void GsCamera::SearchStop() {
	printf("......GsCamera::SearchStop.....\n");
}

bool GsCamera::DealwithAlarm(char* pBuf, unsigned long dwLen) {
	printf("......GsCamera::DealwithAlarm.....\n");
	return true;
}

// speed : 1-7
bool GsCamera::SendPTZ(GSPTZ_CtrlCmd command, int param1, int param2, int speed,
		const char *callinfo) {
	printf("......GsCamera::SendPTZ.....\n");
	return true;
}

int GsCamera::GetPTZState(GSPTZ_CtrlCmd command, bool refresh_device) {
	printf("......GsCamera::GetPTZState.....\n");
	return 0;
}

bool GsCamera::Set_motion_track(const bool enable, const bool srccall) {
	printf("......GsCamera::Set_motion_track.....\n");
	return true;
}

bool GsCamera::Set_PTZ_ParkAction(const bool enable, const bool srccall) {
	printf("......GsCamera::Set_PTZ_ParkAction.....\n");
	return true;
}

bool GsCamera::PresetControl(DWORD dwPTZPresetCmd, DWORD dwPresetIndex,
		const std::string &callinfo) {
	printf("......GsCamera::PresetControl.....\n");
	return true;
}

void GsCamera::OnPublishStart() {
	printf("......GsCamera::OnPublishStart.....\n");
}

void GsCamera::MakeKeyFrame(bool forcenow) {
	printf("......GsCamera::MakeKeyFrame.....\n");
	if (!IsConnect()) {
		return;
	}

	if (!forcenow) {
		const uint32_t lastt = timeGetTime() - m_timeMakeKeyFrame;
		const uint32_t Cam_MakeKeyFrameInterval = RUNCODE_Get(
				defCodeIndex_Cam_MakeKeyFrameInterval);

		if (lastt < Cam_MakeKeyFrameInterval) {
			LOGMSG("MakeKeyFrame(%s) so fast %d<%dms & not do\r\n",
					this->GetName().c_str(), lastt, Cam_MakeKeyFrameInterval);

			return;
		}
	}

	LOGMSG("MakeKeyFrame(%s)\r\n", this->GetName().c_str());

//	if (m_streamfmt) {
//		defNS_HIK::NET_DVR_MakeKeyFrameSub(this->m_camera_hwnd, m_channel);
//	} else {
//		defNS_HIK::NET_DVR_MakeKeyFrame(this->m_camera_hwnd, m_channel);
//	}

	m_timeMakeKeyFrame = timeGetTime();
}

void GsCamera::OnData(BYTE *pBuffer, DWORD dwBufSize) {
	printf("......GsCamera::OnData.....\n");
//	m_demux.PreinitBufCheck();

	const uint32_t newFrameTS = ::timeGetTime();

	if (this->GetStreamObj()->GetRTMPSendObj()->GetIPlayBack()) {
		GSPlayBackCode_ PlayBackCode = stream->CheckPlayBackDoState();
		if (GSPlayBackCode_NULL != PlayBackCode) {
			if (GSPlayBackCode_PLAYRESTART == PlayBackCode) {
				this->PlayBackControl(GSPlayBackCode_PLAYRESTART);
			} else if (GSPlayBackCode_PLAYPAUSE == PlayBackCode) {
				this->PlayBackControl(GSPlayBackCode_PLAYPAUSE);
			}
		}
	}

	if (dwBufSize <= 0) {
		return;
	}

//	if (!stream->HasNAL() && preindex > 0
//			&& (0x67 == buffer[preindex] || 0x68 == buffer[preindex])) {
//
//		x264_nal_t nal[2];
//		unsigned char *bufnext = g_Get_x264_nal_t(buffer, size, nal[0]);
//		if (bufnext) {
//			stream->SetVideoNal(&nal[0], 1);
//
//			if (g_Get_x264_nal_t(bufnext, size - (nal[0].i_payload + prefixNum),
//					nal[1])) {
//				stream->SetVideoNal(&nal[1], 1);
//			}
//		}
//		Delete_x264_nal_t(nal[0]);
//		Delete_x264_nal_t(nal[1]);
//
//		//return ;
//	}
//
//	int prefixNum = 0;
//	int preindex = g_GetH264PreFix(buffer, size > 32 ? 32 : size, prefixNum);
//
//	// h264 no head err
//	if (0 == prefixNum || 0 == preindex) {
//		char chbuf[256] = { 0 };
//		snprintf(chbuf, sizeof(chbuf),
//				"HikCamera::OnData(%s)::PushVideo(index=%d) prefixNum=0 err! size=%d",
//				this->m_name.c_str(), size);
//
//		g_PrintfByte((unsigned char*) buffer, size > 32 ? 32 : size, chbuf);
//	}
//
//	if (this->GetStreamObj()->GetRTMPSendObj()->GetIPlayBack()) {
//		if (h264_nal_unit_type(buffer) != H264_NAL_TYPE_ACCESS_UNIT) {
//			//size = g_h264_remove_all_start_code( (uint8_t*)buffer, size );
//			this->PushVideo(keyframe, defDefault_hik_rate, (char*) buffer, size,
//					m_frame.ts / 100, true);
//		}
//	} else {
//		//size = g_h264_remove_all_start_code( (uint8_t*)buffer, size );
//		this->PushVideo(keyframe, defDefault_hik_rate, (char*) buffer, size,
//				sendFrameTS, true);
//		//this->PushVideo( keyframe, defDefault_hik_rate, (char*)buffer, size, 0, false );
//	}
}

void GsCamera::doAudioSource_CameraReEnc(unsigned char *buffer, int size,
		const uint32_t sendFrameTS) {
	printf("......GsCamera::doAudioSource_CameraReEnc.....\n");
}

bool GsCamera::isTalkSupport() const {
	printf("......GsCamera::isTalkSupport.....\n");
	return false;
}

bool GsCamera::OnTalkSend(defTalkSendCmd_ TalkSendCmd, unsigned char *pdata,
		uint32_t data_size) {
	printf("......GsCamera::OnTalkSend.....\n");
	return true;
}

void GsCamera::check_NetUseable(bool *isChanged) {
	printf("......GsCamera::check_NetUseable.....\n");
}

defGSReturn GsCamera::GetCamShowInfo(int &showtime, int &showname,
		std::string &name) {
	printf("......GsCamera::GetCamShowInfo.....\n");
	return defGSReturn_Err;
}

defGSReturn GsCamera::SetCamShowInfo(const int showtime, const int showname,
		const char *pname) {
	printf("......GsCamera::SetCamShowInfo.....\n");
	return defGSReturn_Err;
}

defGSReturn GsCamera::GetCamCompressCfg(std::string *cfginfo,
		struCamParamBuf *getCamParamBuf) {
	printf("......GsCamera::GetCamCompressCfg.....\n");
	return defGSReturn_Success;
}

// setuseCamParamBuf有值时，使用此覆盖整个结构进行设置
defGSReturn GsCamera::SetCamCompressCfg(const defCamCompress CamCompress,
		const struCamParamBuf *setuseCamParamBuf) {
	printf("......GsCamera::SetCamCompressCfg.....\n");
	return defGSReturn_Success;
}

bool GsCamera::CapturePic(char *buf, DWORD bufsize, DWORD &outsize,
		DWORD PicSize) {
	printf("......GsCamera::CapturePic.....\n");
	return false;
}

