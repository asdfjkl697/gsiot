#include "dataserver.h"

static void dataserver_connection_event(struct bufferevent *bev, short what, void *arg)
{
	if (what & (BEV_EVENT_EOF | BEV_EVENT_ERROR)) {
		bufferevent_free(bev);
	}
}

static void dataserver_connection_read(struct bufferevent *bev, void *arg)
{
	int size;
	char buffer[BUFFER_SIZE];
	packet pkt;	
	clients *client = (clients *)arg;
	struct evbuffer *input = bufferevent_get_input(bev);
	
	while ((size = evbuffer_remove(input, buffer, BUFFER_SIZE)) > 0) {
	    //bufferevent_write(bev, buffer, size);
		int read_size = 0;
		uint8_t *enc = (uint8_t *)buffer;
		
		
		while(size > 0){
			read_size = packet_decode(&pkt, enc, size);
		    if(read_size <= 0 || read_size > size)
		    {				
				break;
		    }

			onPacketRead(client, &pkt);
			
		    enc += read_size;
			size -= read_size;
		}
	}
}


void dataserver_connection_accept(struct evconnlistener *listener,
	evutil_socket_t fd, struct sockaddr *address, int socklen,
	void *ctx)
{
	/* We got a new connection! Set up a bufferevent for it. */
	struct event_base *base = evconnlistener_get_base(listener);
	struct bufferevent *bev = bufferevent_socket_new(
		base, fd, BEV_OPT_CLOSE_ON_FREE);

	bufferevent_setcb(bev, connection_read, NULL, connection_event, client);
	bufferevent_enable(bev, EV_READ | EV_WRITE);
}

